<?php

namespace App\Traits;

use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

trait ExportTrait
{
    /**
     * Generate CSV file with comprehensive data
     */
    protected function generateCSV($data, $filename, $headers, $summary = [])
    {
        // Create CSV content
        $csv = fopen('php://temp', 'r+');

        // Add summary information if provided
        if (!empty($summary)) {
            fputcsv($csv, ['Export Summary']);
            foreach ($summary as $key => $value) {
                fputcsv($csv, [$key, $value]);
            }
            fputcsv($csv, []); // Empty row
        }

        // Add headers
        fputcsv($csv, $headers);

        // Add data rows
        foreach ($data as $row) {
            fputcsv($csv, $row);
        }

        rewind($csv);
        $csvContent = stream_get_contents($csv);
        fclose($csv);

        // Return file download
        return response($csvContent, 200, [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => 'attachment; filename="' . $filename . '"',
            'Content-Length' => strlen($csvContent)
        ]);
    }

    /**
     * Format date for CSV
     */
    protected function formatDate($date, $format = 'M j, Y')
    {
        if (!$date) return '';
        return Carbon::parse($date)->format($format);
    }

    /**
     * Format datetime for CSV
     */
    protected function formatDateTime($datetime, $format = 'M j, Y g:i A')
    {
        if (!$datetime) return '';
        return Carbon::parse($datetime)->format($format);
    }

    /**
     * Format currency for CSV
     */
    protected function formatCurrency($amount, $currency = '$')
    {
        if (!$amount) return $currency . '0.00';
        return $currency . number_format($amount, 2);
    }

    /**
     * Clean filename for export
     */
    protected function cleanFilename($filename)
    {
        return str_replace([' ', '/', '\\', ':', '*', '?', '"', '<', '>', '|'], ['_', '-', '-', '-', '-', '-', '-', '-', '-', '-'], $filename);
    }

    /**
     * Generate export filename
     */
    protected function generateExportFilename($type, $entity, $extension = 'csv')
    {
        $timestamp = date('Y-m-d_H-i-s');
        $filename = "{$type}_{$entity}_{$timestamp}.{$extension}";
        return $this->cleanFilename($filename);
    }

    /**
     * Get user information for export
     */
    protected function getUserInfo($userId)
    {
        $user = DB::table('users')->where('id', $userId)->first();
        return $user ? $user->first_name . ' ' . $user->last_name : 'Unknown User';
    }

    /**
     * Get doctor information for export
     */
    protected function getDoctorInfo($doctorId)
    {
        $doctor = DB::table('doctors')->where('id', $doctorId)->first();
        return $doctor ? $doctor->name : 'Unknown Doctor';
    }

    /**
     * Get patient information for export
     */
    protected function getPatientInfo($patientId)
    {
        $patient = DB::table('patients')->where('id', $patientId)->first();
        return $patient ? $patient->NAME : 'Unknown Patient';
    }

    /**
     * Get specialty information for export
     */
    protected function getSpecialtyInfo($specialtyId)
    {
        $specialty = DB::table('specialties')->where('id', $specialtyId)->first();
        return $specialty ? $specialty->name : 'Unknown Specialty';
    }

    /**
     * Extract payment method from meta JSON
     */
    protected function extractPaymentMethod($meta)
    {
        if (!$meta) return '';

        $metaArray = json_decode($meta, true);
        return $metaArray['payment_method'] ?? '';
    }

    /**
     * Get status with proper formatting
     */
    protected function formatStatus($status)
    {
        if (!$status) return '';
        return ucfirst(str_replace('_', ' ', $status));
    }

    /**
     * Get appointment type from notes
     */
    protected function getAppointmentType($notes)
    {
        if (!$notes) return 'General Consultation';
        return explode(' - ', $notes)[0] ?? 'General Consultation';
    }

    /**
     * Calculate age from date of birth
     */
    protected function calculateAge($dateOfBirth)
    {
        if (!$dateOfBirth) return '';
        return Carbon::parse($dateOfBirth)->age;
    }

    /**
     * Get export summary data
     */
    protected function getExportSummary($data, $type, $userName = '')
    {
        return [
            'Export Type' => ucfirst($type),
            'Generated By' => $userName ?: 'System',
            'Export Date' => date('M j, Y g:i A'),
            'Total Records' => $data->count(),
            'File Format' => 'CSV',
            'Encoding' => 'UTF-8'
        ];
    }

    /**
     * Apply date range filter to query
     */
    protected function applyDateRangeFilter($query, $dateRange, $dateColumn = 'created_at')
    {
        if ($dateRange) {
            $startDate = Carbon::now()->subDays($dateRange);
            $query->where($dateColumn, '>=', $startDate);
        }
        return $query;
    }

    /**
     * Apply status filter to query
     */
    protected function applyStatusFilter($query, $status, $statusColumn = 'STATUS')
    {
        if ($status) {
            $query->where($statusColumn, $status);
        }
        return $query;
    }

    /**
     * Apply search filter to query
     */
    protected function applySearchFilter($query, $search, $searchColumns)
    {
        if ($search) {
            $query->where(function ($q) use ($search, $searchColumns) {
                foreach ($searchColumns as $column) {
                    $q->orWhere($column, 'like', '%' . $search . '%');
                }
            });
        }
        return $query;
    }

    /**
     * Get export statistics
     */
    protected function getExportStats($data, $statusColumn = 'STATUS')
    {
        return [
            'Total' => $data->count(),
            'Active' => $data->where($statusColumn, 'active')->count(),
            'Inactive' => $data->where($statusColumn, 'inactive')->count(),
            'Pending' => $data->where($statusColumn, 'pending')->count(),
            'Completed' => $data->where($statusColumn, 'completed')->count(),
            'Cancelled' => $data->where($statusColumn, 'cancelled')->count(),
        ];
    }
}
